/**
 * Copyright  2020 PreCure ApS
 *
 * All Rights Reserved
 */

#ifndef SENSOR_SERVICE_H__
#define SENSOR_SERVICE_H__

#include <stdint.h>
#include "ble.h"
#include "ble_srv_common.h"

// 6cc97305-b908-4dc9-8a1a-9fd001a8b75c
// generated by https://www.uuidgenerator.net/version4
// See https://www.ietf.org/rfc/rfc4122.txt
// Defining 16-bit service and 128-bit base UUIDs
// 128-bit base UUID
#define BLE_UUID_PRECURE_BACK_BASE_UUID                   {{0x5c, 0xb7, 0xa8, 0x01, 0xd0, 0x9f, 0x1a, 0x8a, 0xc9, 0x4d, 0x08, 0xb9, 0x05, 0x73, 0xc9, 0x6c}}
#define BLE_UUID_OUR_SENSOR_SERVICE_DATA_STREAM_UUID      0xf000
#define BLE_UUID_OPERATING_MODE_UUID                      0xe000
#define BLE_UUID_OPERATING_MODE_SYSTEM_STATE_UUID         0xe001
#define BLE_UUID_SENSOR_SERVICE_UUID                      0xd000
#define BLE_UUID_SENSOR_SERVICE_DATA_STREAM_UUID          0xd001
#define BLE_UUID_SENSOR_SERVICE_SENSOR_STATE_UUID         0xd002
#define BLE_UUID_SENSOR_SERVICE_IMU_SENSOR_FREQUENCY_UUID 0xd003
#define BLE_UUID_SENSOR_SERVICE_EMG_SENSOR_FREQUENCY_UUID 0xd004
#define BLE_UUID_SENSOR_SERVICE_EMG_FILTER_FREQUENCY_UUID 0xd005
#define BLE_UUID_SENSOR_SERVICE_MOTION_SENSITIVITY_UUID   0xd006
#define BLE_UUID_CONFIGURATION_SERVICE_UUID               0xc000
#define BLE_UUID_CONFIGURATION_SERVICE_COMMAND_UUID       0xc001

/* This structure contains various status information for
 * sensor service. The name is based on the naming convention
 * used in Nordics SDKs. 
 * 'ble' indicates that it is a Bluetooth Low Energy relevant
 * structure and 'os' is short for Our Service.
 */
typedef struct
{
    uint16_t                 conn_handle;    /**< Handle of the current connection
						  (as provided by the BLE stack,
						  is BLE_CONN_HANDLE_INVALID if
						  not in a connection).*/
    uint16_t                 service_handle; /**< Handle of Sensor Service
						  (as provided by the BLE stack). */
    ble_gatts_char_handles_t char_handles;
} ble_os_t;

/* This structure contains various status information for
 * the service Operating Mode. 
 */
typedef struct
{
    uint16_t                 conn_handle;    /**< Handle of the current connection. */
    uint16_t                 service_handle; /**< Handle of the service Operating Mode. */
    uint16_t                 system_state;   /**< Handle of the characteristic System State. */
    ble_gatts_char_handles_t char_handles;
} ble_om_t;

/* This structure contains various status information for
 * the service Operating Mode. 
 */
typedef struct
{
    uint16_t                 conn_handle;
    uint16_t                 service_handle;
    uint16_t                 data_stream; 
    uint16_t                 imu_sensor_frequency; 
    uint16_t                 emg_sensor_frequency; 
    uint16_t                 emg_filter_frequency; 
    uint16_t                 motion_sensitivity; 
    ble_gatts_char_handles_t char_handles;
} ble_ss_t;

/* This structure contains various status information for
 * the service Operating Mode. 
 */
typedef struct
{
    uint16_t                 conn_handle;
    uint16_t                 service_handle;
    uint16_t                 configuration; 
    uint16_t                 command; 
    ble_gatts_char_handles_t char_handles;
} ble_cs_t;

/**@brief Function for handling BLE Stack events related to sensor service and characteristic.
 *
 * @details Handles all events from the BLE stack of interest to Sensor Service.
 *
 * @param[in]   p_sensor_service         Sensor Service structure.
 * @param[in]   p_ble_evt  Event received from the BLE stack.
 */
void ble_sensor_service_on_ble_evt(ble_evt_t const * p_ble_evt, void * p_context);

/**@brief Function for initializing our new service.
 *
 * @param[in]   p_sensor_service         Pointer to Sensor Service structure.
 */
void sensor_service_init(ble_os_t * p_sensor_service);

/**@brief Function for updating and sending new characteristic values
 *
 * @details The application calls this function whenever our timer_timeout_handler triggers
 *
 * @param[in]   p_sensor_service         Sensor Service structure.
 * @param[in]   characteristic_value     New characteristic value.
 */
void our_temperature_characteristic_update(ble_os_t *p_sensor_service, int32_t *temperature_value);

#endif  /* SENSOR_SERVICE_H__ */
